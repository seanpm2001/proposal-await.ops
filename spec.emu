<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Proposal await.ops
stage: 0
contributors: "Jack Works"
</pre>

<emu-clause id="sec-ecmascript-language-functions-and-classes" number="15">
  <h1>ECMAScript Language: Functions and Classes</h1>

  <emu-clause id="sec-async-function-definitions" number="8">
    <h1>Async Function Definitions</h1>
    <h2>Syntax</h2>
    <emu-grammar type="definition">
      AwaitExpression[Yield] :
        `await` UnaryExpression[?Yield, +Await]
        <ins>
        `await` `.` `all` UnaryExpression[?Yield, +Await]
        `await` `.` `allSettled` UnaryExpression[?Yield, +Await]
        `await` `.` `any` UnaryExpression[?Yield, +Await]
        `await` `.` `race` UnaryExpression[?Yield, +Await]
        </ins>
    </emu-grammar>

    <emu-clause id="sec-async-function-definitions-runtime-semantics-evaluation" number="5">
      <h1>Runtime Semantics: Evaluation</h1>
      <emu-grammar>
        AwaitExpression : `await` `.` `all` UnaryExpression
      </emu-grammar>
      <emu-alg>
        1. Let _exprRef_ be ? Evaluation of |UnaryExpression|.
        1. Let _value_ be ? GetValue(_exprRef_).
        1. Let _pendingPromise_ be ? Call(%Promise.all%, %Promise%, &laquo; _value_ &raquo;).
        1. Return ? Await(_pendingPromise_).
      </emu-alg>

      <emu-grammar>
        AwaitExpression : `await` `.` `allSettled` UnaryExpression
      </emu-grammar>
      <emu-alg>
        1. Let _exprRef_ be ? Evaluation of |UnaryExpression|.
        1. Let _value_ be ? GetValue(_exprRef_).
        1. Let _pendingPromise_ be ? Call(%Promise.allSettled%, %Promise%, &laquo; _value_ &raquo;).
        1. Return ? Await(_pendingPromise_).
      </emu-alg>

      <emu-grammar>
        AwaitExpression : `await` `.` `any` UnaryExpression
      </emu-grammar>
      <emu-alg>
        1. Let _exprRef_ be ? Evaluation of |UnaryExpression|.
        1. Let _value_ be ? GetValue(_exprRef_).
        1. Let _pendingPromise_ be ? Call(%Promise.any%, %Promise%, &laquo; _value_ &raquo;).
        1. Return ? Await(_pendingPromise_).
      </emu-alg>

      <emu-grammar>
        AwaitExpression : `await` `.` `race` UnaryExpression
      </emu-grammar>
      <emu-alg>
        1. Let _exprRef_ be ? Evaluation of |UnaryExpression|.
        1. Let _value_ be ? GetValue(_exprRef_).
        1. Let _pendingPromise_ be ? Call(%Promise.race%, %Promise%, &laquo; _value_ &raquo;).
        1. Return ? Await(_pendingPromise_).
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>
